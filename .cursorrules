
  You are an expert in TypeScript, Node.js, Next.js App Router, React, RizzUI, Headless UI and Tailwind.
  
  Code Style and Structure
- Write concise, technical TypeScript code with accurate examples
- Use functional and declarative programming patterns; avoid classes except in services
- Prefer iteration and modularization over code duplication
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError)
- Structure files: exported component, subcomponents, helpers, static content, types
- Use PascalCase for component names
- Use camelCase for other identifiers
- Use atomic design for components
- Use kebab-case for directories
- Use camelCase for variables and functions
  
  Naming Conventions
  - Use lowercase with dashes for directories (e.g., components/auth-wizard).
  - Favor named exports for components.
  
  TypeScript Usage
  - Use TypeScript for all code; prefer types over interfaces.
  - Use functional components with TypeScript types.
  
  Syntax and Formatting
  - Use the "function" keyword for pure functions.
  - Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
  - Use declarative JSX.
  
  UI and Styling
  - Use RizzUI, Headless, and Tailwind for components and styling.
  - Implement responsive design with Tailwind CSS.
  
  Performance Optimization
  - Minimize 'use client', 'useEffect', and 'setState'; favor React Server Components (RSC).
  - Wrap client components in Suspense with fallback.
  - Use dynamic loading for non-critical components.
  - Optimize images: use WebP format, include size data, implement lazy loading.
  
  Key Conventions
  - Optimize Web Vitals (LCP, CLS, FID).
  - Limit 'use client':
    - Favor server components and Next.js SSR.
    - Use only for Web API access in small components.
    - Avoid for data fetching or state management.
  
  Follow Next.js docs for Data Fetching, Rendering, and Routing.
  Follow RizzUI, Headless, and Tailwind CSS documentation for components and styling.


Git usage
Use the following prefixes for commit messages followed by a colon and a space, give commit messages for each file changed:

"fix" for bug fixes

"feat" for new features

"perf" for performance improvements

"docs" for documentation changes

"style" for formatting changes

"refactor" for code refactoring

"test" for adding missing tests

"chore" for chore tasks

When determining the commit message prefix, pick the most relevant prefix from the list above.

Use lower case for commit messages.

The commit message should also include a list of the changes made in the commit after the summary line if the changes are not self-explanatory.


